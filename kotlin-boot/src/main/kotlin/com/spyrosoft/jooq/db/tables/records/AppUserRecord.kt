/*
 * This file is generated by jOOQ.
 */
package com.spyrosoft.jooq.db.tables.records


import com.spyrosoft.jooq.db.tables.AppUser

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AppUserRecord() : UpdatableRecordImpl<AppUserRecord>(AppUser.APP_USER), Record5<String?, String?, String?, String?, Int?> {

    open var firstname: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var lastname: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var email: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var address: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var id: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<String?, String?, String?, String?, Int?> = super.fieldsRow() as Row5<String?, String?, String?, String?, Int?>
    override fun valuesRow(): Row5<String?, String?, String?, String?, Int?> = super.valuesRow() as Row5<String?, String?, String?, String?, Int?>
    override fun field1(): Field<String?> = AppUser.APP_USER.FIRSTNAME
    override fun field2(): Field<String?> = AppUser.APP_USER.LASTNAME
    override fun field3(): Field<String?> = AppUser.APP_USER.EMAIL
    override fun field4(): Field<String?> = AppUser.APP_USER.ADDRESS
    override fun field5(): Field<Int?> = AppUser.APP_USER.ID
    override fun component1(): String? = firstname
    override fun component2(): String? = lastname
    override fun component3(): String? = email
    override fun component4(): String? = address
    override fun component5(): Int? = id
    override fun value1(): String? = firstname
    override fun value2(): String? = lastname
    override fun value3(): String? = email
    override fun value4(): String? = address
    override fun value5(): Int? = id

    override fun value1(value: String?): AppUserRecord {
        this.firstname = value
        return this
    }

    override fun value2(value: String?): AppUserRecord {
        this.lastname = value
        return this
    }

    override fun value3(value: String?): AppUserRecord {
        this.email = value
        return this
    }

    override fun value4(value: String?): AppUserRecord {
        this.address = value
        return this
    }

    override fun value5(value: Int?): AppUserRecord {
        this.id = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: String?, value5: Int?): AppUserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised AppUserRecord
     */
    constructor(firstname: String? = null, lastname: String? = null, email: String? = null, address: String? = null, id: Int? = null): this() {
        this.firstname = firstname
        this.lastname = lastname
        this.email = email
        this.address = address
        this.id = id
    }
}
